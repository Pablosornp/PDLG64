Terminales = { var id ; if ( ) while } { switch case break default int bool string return print
		 	prompt function , || && == !=  < > -= ! = + - * / %  CAD : cteent ctebool }

NoTerminales = { P B T S _S F H L Q A K X C E _E R _R U _U V _V W _W Z _Z G _G D }
Axioma = P

Producciones = {
P -> B P
P -> F P
P -> lambda
B -> var T id ;
B -> if ( E ) S
B -> while ( E ) { C }
B -> switch ( E ) { D }
B -> S
T -> int
T -> bool
T -> string
S -> id _S
S -> return X ;
S -> print ( E ) ;
S -> prompt ( id ) ;
S -> break ;
_S -> = E ;
_S -> -= E ;
_S -> ( L ) ;
F -> function H id ( A ) { C }
H -> T
H -> lambda
L -> E Q
L -> lambda
Q -> , E Q
Q -> lambda
A -> T id K
A -> lambda
K -> , T id K
K -> lambda
X -> E
X -> lambda
C -> B C
C -> lambda
E -> R _E
_E -> || R _E
_E -> lambda
R -> U _R
_R -> && U _R
_R -> lambda
U -> V _U
_U -> == V _U
_U -> != V _U
_U -> lambda
V -> W _V
_V -> > W _V
_V -> < W _V
_V -> lambda
W -> Z _W
_W -> + Z _W
_W -> - Z _W
_W -> lambda
Z -> G _Z
_Z -> * G _Z
_Z -> / G _Z
_Z -> % G _Z
_Z -> lambda
G -> ! G
G -> id _G
G -> ( E )
G -> cteent
G -> CAD
G -> ctebool
_G -> ( L )
_G -> lambda
D -> case cteent : C D
D -> default : C
}
